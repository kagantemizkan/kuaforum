services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hair-salon-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: hair_salon_db
      POSTGRES_USER: hair_salon_user
      POSTGRES_PASSWORD: hair_salon_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    networks:
      - hair-salon-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U hair_salon_user -d hair_salon_db']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Queues
  redis:
    image: redis:7-alpine
    container_name: hair-salon-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - hair-salon-network
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', 'redis_password', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: hair-salon-backend
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./prisma:/app/prisma
      - uploads:/app/uploads
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hair-salon-network
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        npx prisma generate &&
        npx prisma db push &&
        echo 'Starting application...' &&
        npm run start:prod
      "

  # API Testing Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: hair-salon-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_API_VERSION: v1
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    ports:
      - '3001:3000'
    depends_on:
      - backend
    networks:
      - hair-salon-network

  # Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: hair-salon-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    depends_on:
      - postgres
    networks:
      - hair-salon-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: hair-salon-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_password
    ports:
      - '8081:8081'
    depends_on:
      - redis
    networks:
      - hair-salon-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local

networks:
  hair-salon-network:
    driver: bridge
