// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// ENUMS
// ================================

enum UserRole {
  CUSTOMER
  SALON_OWNER
  STAFF
  ADMIN
}

enum SalonRole {
  CUSTOMER
  STAFF
  OWNER
}

enum StaffRole {
  STYLIST
  ASSISTANT
  MANAGER
  OWNER
}

enum ServiceCategory {
  HAIRCUT
  COLORING
  STYLING
  TREATMENT
  EXTENSIONS
  CONSULTATION
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum QRType {
  SALON_JOIN
  BOOKING
  LOYALTY
}

enum AIStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum LoyaltyType {
  EARNED
  REDEEMED
  BONUS
  EXPIRED
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum NotificationType {
  BOOKING
  LOYALTY
  SYSTEM
  MARKETING
}

// ================================
// CORE MODELS
// ================================

// User Management
model User {
  id              String   @id @default(uuid())
  email           String   @unique
  phone           String?  @unique
  password        String?  // Optional for OAuth users
  firstName       String
  lastName        String
  avatar          String?
  role            UserRole @default(CUSTOMER)
  isActive        Boolean  @default(true)
  isPhoneVerified Boolean  @default(false)
  isEmailVerified Boolean  @default(false)
  pushToken       String?  // For push notifications
  // OAuth fields
  googleId        String?  @unique
  appleId         String?  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?

  // Relations
  customerProfile  CustomerProfile?
  salonMemberships SalonMember[]
  bookings         Booking[]
  reviews          Review[]
  loyaltyPoints    LoyaltyPoint[]
  refreshTokens    RefreshToken[]
  styleSuggestions StyleSuggestion[]
  staff            Staff[]
  notifications    Notification[]
  otpVerifications OTPVerification[]

  @@map("users")
}

// Multi-tenant Salon System
model Salon {
  id               String           @id @default(uuid())
  name             String
  description      String?
  address          String
  city             String
  country          String
  phone            String
  email            String
  website          String?
  logo             String?
  banner           String?
  businessHours    Json? // Weekly business hours
  isActive         Boolean          @default(true)
  subscriptionTier SubscriptionTier @default(FREE)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?

  // Relations
  members          SalonMember[]
  services         Service[]
  staff            Staff[]
  bookings         Booking[]
  reviews          Review[]
  qrCodes          QRCode[]
  analytics        Analytics[]
  styleSuggestions StyleSuggestion[]
  loyaltyPoints    LoyaltyPoint[]
  subscription     Subscription?

  @@map("salons")
}

// Salon Membership (Multi-tenancy)
model SalonMember {
  id       String    @id @default(uuid())
  userId   String
  salonId  String
  role     SalonRole @default(CUSTOMER)
  joinedAt DateTime  @default(now())
  isActive Boolean   @default(true)

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  salon Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)

  @@unique([userId, salonId])
  @@map("salon_members")
}

// Services & Pricing
model Service {
  id          String          @id @default(uuid())
  salonId     String
  name        String
  description String?
  duration    Int // minutes
  price       Decimal         @db.Decimal(10, 2)
  category    ServiceCategory
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  salon    Salon     @relation(fields: [salonId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("services")
}

// Staff Management
model Staff {
  id          String            @id @default(uuid())
  salonId     String
  userId      String
  role        StaffRole
  specialties ServiceCategory[]
  schedule    Json? // Weekly schedule
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  salon    Salon     @relation(fields: [salonId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@unique([salonId, userId])
  @@map("staff")
}

// Booking System
model Booking {
  id               String        @id @default(uuid())
  salonId          String
  customerId       String
  serviceId        String
  staffId          String?
  appointmentDate  DateTime
  duration         Int // minutes
  status           BookingStatus @default(PENDING)
  notes            String?
  totalPrice       Decimal       @db.Decimal(10, 2)
  loyaltyPointsUsed Int          @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  salon    Salon     @relation(fields: [salonId], references: [id], onDelete: Cascade)
  customer User      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  service  Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staff    Staff?    @relation(fields: [staffId], references: [id], onDelete: SetNull)
  payments Payment[]

  @@map("bookings")
}

// QR Code System
model QRCode {
  id        String   @id @default(uuid())
  salonId   String
  type      QRType
  code      String   @unique
  expiresAt DateTime?
  maxUses   Int?
  usedCount Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  salon Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)

  @@map("qr_codes")
}

// AI Style Suggestions
model StyleSuggestion {
  id         String   @id @default(uuid())
  userId     String
  salonId    String
  imageUrl   String
  aiResponse Json?
  status     AIStatus @default(PENDING)
  createdAt  DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  salon Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)

  @@map("style_suggestions")
}

// Payment & RevenueCat
model Payment {
  id                       String        @id @default(uuid())
  bookingId                String
  amount                   Decimal       @db.Decimal(10, 2)
  currency                 String        @default("USD")
  status                   PaymentStatus @default(PENDING)
  revenueCatTransactionId  String?
  createdAt                DateTime      @default(now())

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Subscription Management
model Subscription {
  id                   String           @id @default(uuid())
  salonId              String           @unique
  tier                 SubscriptionTier
  status               String           @default("ACTIVE")
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  revenueCatCustomerId String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  // Relations
  salon Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Analytics & Reporting
model Analytics {
  id        String   @id @default(uuid())
  salonId   String
  date      DateTime
  revenue   Decimal  @db.Decimal(10, 2)
  bookings  Int
  customers Int
  metrics   Json? // Additional KPIs
  createdAt DateTime @default(now())

  // Relations
  salon Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)

  @@unique([salonId, date])
  @@map("analytics")
}

// Loyalty System
model LoyaltyPoint {
  id        String      @id @default(uuid())
  userId    String
  salonId   String
  points    Int
  type      LoyaltyType
  expiresAt DateTime?
  createdAt DateTime    @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  salon Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)

  @@map("loyalty_points")
}

// Reviews & Ratings
model Review {
  id         String   @id @default(uuid())
  salonId    String
  customerId String
  bookingId  String?
  rating     Int      @db.SmallInt
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  salon    Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)
  customer User  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// Refresh Tokens
model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// Customer Profiles
model CustomerProfile {
  id          String      @id @default(uuid())
  userId      String      @unique
  preferences Json? // Hair preferences, allergies, etc.
  loyaltyTier LoyaltyTier @default(BRONZE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customer_profiles")
}

// Notifications
model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Notification Preferences
model NotificationPreference {
  id     String @id @default(uuid())
  userId String @unique
  email  Json   @default("{}")
  push   Json   @default("{}")
  sms    Json   @default("{}")

  @@map("notification_preferences")
}

// OTP Verification
model OTPVerification {
  id        String   @id @default(uuid())
  userId    String
  phone     String
  otp       String
  purpose   String   // 'registration', 'login', 'password_reset'
  verified  Boolean  @default(false)
  attempts  Int      @default(0)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_verifications")
}